local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local requestFunction = http_request or request or HttpPost or syn.request

local savedJobIdUrl = "http://223.205.86.150:5000/" .. _G.Group .. "/savedJobId"
local hostStatusUrl = "http://223.205.86.150:5000/" .. _G.Group .. "/HostStatus/"

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å HTTP ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
local function safeHttpGet(url)
    local success, response = pcall(function()
        return game:HttpGet(url)
    end)
    if success then
        return response
    else
        print("HTTP Error: ", response) -- ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        wait(5) -- ‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        return nil
    end
end

local function getSavedJobId()
    local response = safeHttpGet(savedJobIdUrl)
    if response then
        local data = HttpService:JSONDecode(response)
        if data and data.jobid then
            return data.jobid
        end
    end
    return nil
end

local function CheckAcientOneStatus()
    local v227, v228, v229 = nil, nil, nil
    local success, err = pcall(function()
        v229, v228, v227 = game.ReplicatedStorage.Remotes.CommF_:InvokeServer("UpgradeRace", "Check")
    end)
    if not success then
        print("Error invoking server: ", err)
        wait(5) -- ‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        return nil, "Error"
    end

    local trainingSessions = v228
    local upgradeStatus
    if v229 == 1 or v229 == 3 then
        upgradeStatus = "üí™ Required Train More"
    elseif v229 == 2 or v229 == 4 or v229 == 7 then
        upgradeStatus = "‚öôÔ∏è Can Buy Gear With " .. v227 .. " Fragments"
    elseif v229 == 5 then
        upgradeStatus = "üèÜ You Are Done Your Race."
    elseif v229 == 6 then
        upgradeStatus = "‚è≥ Upgrades completed: " .. (v228 - 2) .. "/3, Need Trains More"
    elseif v229 == 0 then
        upgradeStatus = "‚úÖ Ready For Trial"
    else
        upgradeStatus = "‚ùì You have yet to achieve greatness"
    end

    return trainingSessions, upgradeStatus
end

local function teleportToHost()
    local hostJobId = getSavedJobId()
    if hostJobId then
        if hostJobId ~= game.JobId then
            print("‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á Host")
            TeleportService:TeleportToPlaceInstance(game.PlaceId, hostJobId, Players.LocalPlayer)
        else
            print("‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Host ‡πÅ‡∏•‡πâ‡∏ß")
        end
    else
        print("‡πÑ‡∏°‡πà‡∏û‡∏ö JobId ‡∏Ç‡∏≠‡∏á Host ‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå")
    end
end

local function TeleportToThirdServer()
    local PlaceId = game.PlaceId
    local ServerType = "Public"
    local SortOrder = "Asc"
    local ExcludeFullGames = true
    local Limit = 100

    local ApiUrl = string.format("https://games.roblox.com/v1/games/%d/servers/%s?sortOrder=%s&excludeFullGames=%s&limit=%d",
        PlaceId, ServerType, SortOrder, tostring(ExcludeFullGames), Limit)

    local function ListServers(cursor)
        local url = ApiUrl .. ((cursor and "&cursor="..cursor) or "")
        local response = safeHttpGet(url)
        if response then
            return HttpService:JSONDecode(response)
        else
            return nil
        end
    end

    local player = Players.LocalPlayer
    local Servers, Server, Next
    local retryCount = 0
    local maxRetries = 5 -- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î

    repeat
        Servers = ListServers(Next)
        if Servers and Servers.data then
            Server = Servers.data[3] -- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà 3
            Next = Servers.nextPageCursor
        else
            Server = nil
        end

        retryCount = retryCount + 1
        if not Server and retryCount < maxRetries then
            print("Retrying... Attempt", retryCount)
            wait(5) -- ‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        end
    until Server or retryCount >= maxRetries

    if Server then
        print("Teleporting to third server...")
        TeleportService:TeleportToPlaceInstance(PlaceId, Server.id, player)
    else
        warn("Unable to find a suitable server. Attempting random server.")
        TeleportService:Teleport(PlaceId) -- ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏™‡∏∏‡πà‡∏°
    end
end


local function checkAndTeleport()
    wait(30)
    local trainingSessions, upgradeStatus = CheckAcientOneStatus()
    if upgradeStatus == "Error" then
        return -- ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    end

    local hostJobId = getSavedJobId()
    local currentJobId = game.JobId

    print("Host JobId:", hostJobId)
    print("Current JobId:", currentJobId)

    if currentJobId == hostJobId then
        if upgradeStatus == "‚úÖ Ready For Trial" or (trainingSessions == nil and upgradeStatus == "‚ùì You have yet to achieve greatness") then
            print("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡πâ‡∏≤‡∏¢‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå")
        else
            print("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Host, ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà 3...")
            TeleportToThirdServer()
        end
    else
        if upgradeStatus == "‚úÖ Ready For Trial" or (trainingSessions == nil and upgradeStatus == "‚ùì You have yet to achieve greatness") then
            print("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç, ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏¢‡πâ‡∏≤‡∏¢‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏õ‡∏´‡∏≤ Host...")
            teleportToHost()
        else
            print("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Host, ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£")
        end
    end
end

while true do
    local success, err = pcall(function()
        checkAndTeleport()
    end)
    if not success then
        warn("Error in checkAndTeleport:", err)
        wait(10) -- ‡∏£‡∏≠ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
    end
    wait(30) -- ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
end
